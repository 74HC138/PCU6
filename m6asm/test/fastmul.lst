.equ SHIFT_IN 0xf0
.equ SHIFT_RIGHT 0xf0
.equ SHIFT_LEFT 0xf1
.equ ZS 0x08
.equ ZC 0x0a
.equ SFS 0x20
.equ SFC 0x30
.org 0x00
Start:
//set parameters and clear Q
0000: 00 02  ldx i (0x00) [I]
0002: 0a 83  ldm i (0x0a) [BX] //A High Byte
0004: 00 0a  inx
0006: 10 83  ldm i (0x10) [BX] //A Low Byte
0008: 00 0a  inx
000a: 12 83  ldm i (0x12) [BX] //B Highest Byte
000c: 00 0a  inx
000e: 34 83  ldm i (0x34) [BX] //B MidHigh Byte
0010: 00 0a  inx
0012: 56 83  ldm i (0x56) [BX] //B MidLow Byte
0014: 00 0a  inx
0016: 78 83  ldm i (0x78) [BX] //B Low Byte
0018: 00 0a  inx
001a: 00 83  ldm i (0x00) [BX] //Q High
001c: 00 0a  inx
001e: 00 83  ldm i (0x00) [BX] //Q MidHigh
0020: 00 0a  inx
0022: 00 83  ldm i (0x00) [BX] //Q MidLow
0024: 00 0a  inx
0026: 00 83  ldm i (0x00) [BX] //Q Low
0028: 16 04  jmp i (Multiply)
Return:
002a: 15 04  jmp i (Return)
//parameters
//mem(0 .. 1) A
//mem(2 .. 5) B
//mem(6 .. 9) Q
Multiply:
//--------------
//Test if A is zero
002c: 00 70  lda m (0x00) [I] //A High byte
002e: 0a 07  scf i (ZC)
0030: 1d 05  jcc i (Multiply_shiftA)
0032: 01 70  lda m (0x01) [I] //A Low byte
0034: 0a 07  scf i (ZC)
0036: 1d 05  jcc i (Multiply_shiftA)
0038: 15 04  jmp i (Return)
Multiply_shiftA:
//--------------
//16 bit shift right
003a: 00 70  lda m (0x00) [I] //A High Byte
003c: f0 13  ldm a (SHIFT_IN) [I]
003e: 00 07  scf i (0x00)
0040: f0 70  lda m (SHIFT_RIGHT) [I]
0042: 00 13  ldm a (0x00) [I] //A High Byte
0044: 20 07  scf i (SFS)
0046: 01 70  lda m (0x01) [I] //A Low byte
0048: f0 13  ldm a (SHIFT_IN) [I]
004a: f0 70  lda m (SHIFT_RIGHT) [I]
004c: 01 13  ldm a (0x01) [I] //A Low Byte
//--------------
004e: 20 07  scf i (SFS)
0050: 3e 05  jcc i (Multiply_add)
Multiply_shiftB:
//--------------
//32 bit shift left
0052: 00 07  scf i (0x00) //clear c flag
0054: 05 70  lda m (0x05) [I]
0056: f0 13  ldm a (SHIFT_IN) [I]
0058: f1 70  lda m (SHIFT_LEFT) [I]
005a: 05 13  ldm a (0x05) [I]
005c: 20 07  scf i (SFS)
005e: 04 70  lda m (0x04) [I]
0060: f0 13  ldm a (SHIFT_IN) [I]
0062: f1 70  lda m (SHIFT_LEFT) [I]
0064: 04 13  ldm a (0x04) [I]
0066: 03 70  lda m (0x03) [I]
0068: f0 13  ldm a (SHIFT_IN) [I]
006a: 20 07  scf i (SFS)
006c: f1 70  lda m (SHIFT_LEFT) [I]
006e: 03 13  ldm a (0x03) [I]
0070: 02 70  lda m (0x02) [I]
0072: f0 13  ldm a (SHIFT_IN) [I]
0074: 20 07  scf i (SFS)
0076: f1 70  lda m (SHIFT_LEFT) [I]
0078: 02 13  ldm a (0x02) [I]
//--------------
007a: 16 04  jmp i (Multiply)
Multiply_add:
//--------------
//32 bit add
007c: 00 36  cmp + (0x00) [I] //clear carry flag
007e: 05 70  lda m (0x05) [I]
0080: 09 71  ldb m (0x09) [I]
0082: 00 b0  lda + (0x00) [BX]
0084: 09 13  ldm a (0x09) [I]
0086: 04 70  lda m (0x04) [I]
0088: 08 71  ldb m (0x08) [I]
008a: 00 b0  lda + (0x00) [BX]
008c: 08 13  ldm a (0x08) [I]
008e: 03 70  lda m (0x03) [I]
0090: 07 71  ldb m (0x07) [I]
0092: 00 b0  lda + (0x00) [BX]
0094: 07 13  ldm a (0x07) [I]
0096: 02 70  lda m (0x02) [I]
0098: 06 71  ldb m (0x06) [I]
009a: 00 b0  lda + (0x00) [BX]
009c: 06 13  ldm a (0x06) [I]
009e: 29 04  jmp i (Multiply_shiftB)
//--------------
